АНАЛИТИКА

1. Бизнес-процесс создания заказа

Диаграмма бизнес-процесса (BPMN):
[Пользователь] --> (Открыть приложение)
(Открыть приложение) --> (Выбрать выпечку)
(Выбрать выпечку) --> (Добавить в корзину)
(Добавить в корзину) --> (Перейти к оформлению заказа)
(Перейти к оформлению заказа) --> (Ввести данные для заказа)
(Ввести данные для заказа) --> (Подтвердить заказ)
(Подтвердить заказ) --> [Сервер]
[Сервер] --> (Создать заказ в базе данных)
(Success) --> [Пользователь]

2. Процесс синхронизации данных между клиентом и сервером

API методы

- Создание заказа

Метод: POST /api/orders
Параметры:
userId: ID пользователя
items: массив объектов с ID товара и количеством
deliveryAddress: адрес доставки
Ответ: ID созданного заказа

- Редактирование заказа

Метод: PUT /api/orders/{orderId}
Параметры:
items: массив объектов с ID товара и количеством
Ответ: статус операции

 - Отмена заказа

Метод: DELETE /api/orders/{orderId}
Ответ: статус операции

- Изменение персональных данных
Метод: PUT /api/users/{userId}
Параметры:
name: новое имя
email: новый email
phone: новый телефон
Ответ: статус операции

- Оплата заказа
Метод: POST /api/payments
Параметры:
orderId: ID заказа
paymentMethod: способ оплаты
Ответ: статус оплаты

3. ER-диаграмма сущностей
[User] --< [Order] --< [OrderItem] >-- [Product]
        |
        >-- [Payment]

-User: ID, Name, Email, Phone

 -Order: ID, UserID, DeliveryAddress, Status, CreatedAt

 -OrderItem: ID, OrderID, ProductID, Quantity

 -Product: ID, Name, Price

 -Payment: ID, OrderID, Amount, PaymentMethod, Status

4. Прототип экрана создания заказа

Описание пользовательского интерфейса для экрана создания заказа

- Заголовок: "Создание заказа"

- Поле для выбора товара (список доступных продуктов с возможностью добавления в корзину)

- Поле для ввода адреса доставки

- Кнопка "Подтвердить заказ"

- Отображение итоговой стоимости заказа

5. Подробное описание функции редактирования заказа

-Функция редактирования заказа позволяет пользователю изменять содержимое своего заказа после его создания. Пользователь может добавлять или удалять товары из своего заказа и изменять количество.

UML диаграмма активности:
[Пользователь] --> (Запрос на редактирование заказа)
(Retrieve Order) --> (Отобразить текущие товары)
(Изменить товары) --> (Подтвердить изменения)
(Подтвердить изменения) --> [Сервер]
[Сервер] --> (Обновить заказ в базе данных)

Используемые API методы

- Метод редактирования заказа:

   Метод: PUT /api/orders/{orderId}

   Параметры: items, где каждый элемент включает productId и quantity.
  
-Процесс хранения информации о покупках пользователя

Информация о покупках хранится в таблицах базы данных. Каждая покупка связывается с пользователем через уникальный идентификатор пользователя.

6. SQL-запросы

1. Вывести покупателей с количеством осуществленных покупок:
SELECT u.id AS user_id, u.name AS user_name, COUNT(o.id) AS purchase_count
FROM Users u
LEFT JOIN Orders o ON u.id = o.user_id
GROUP BY u.id
ORDER BY purchase_count DESC;

2. Общая стоимость товаров для каждого покупателя и отсортировать результат в порядке убывания:
SELECT u.id AS user_id, u.name AS user_name, SUM(p.price * oi.quantity) AS total_spent
FROM Users u
JOIN Orders o ON u.id = o.user_id
JOIN OrderItems oi ON o.id = oi.order_id
JOIN Products p ON oi.product_id = p.id
GROUP BY u.id
ORDER BY total_spent DESC;

3. Получить покупателей, купивших только один товар:
SELECT u.id AS user_id, u.name AS user_name
FROM Users u
JOIN Orders o ON u.id = o.user_id
JOIN OrderItems oi ON o.id = oi.order_id
GROUP BY u.id
HAVING COUNT(oi.product_id) = 1;